{"version":3,"sources":["components/card/index.jsx","components/card-list/index.js","components/search-box/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAW,OAAhB,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,IAAMC,IAAI,YAC1D,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,YCJlBC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAW,YAAhB,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLtBO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBACIC,KAAK,SACLb,UAAW,SACXW,YAAaA,EACbG,SAAUF,MCmCPG,E,kDAtCX,aAAe,IAAD,8BACV,gBAaJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAOhD,WAAU,IAAD,EAE2BC,KAAKN,MAA9Bb,EAFF,EAEEA,SAAUU,EAFZ,EAEYA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGpD,OACI,sBAAK9B,UAAW,MAAhB,UACI,oBAAIA,UAAW,QAAf,8BACA,cAAC,EAAD,CACIW,YAAY,kBACZC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjClBI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.56094f96.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.css'\n\nexport const Card = (props) => {\n    return (\n        <div className={'card'}>\n            <img src={`https://robohash.org/${props.monster.id}`} alt=\"monster\"/>\n            <h1>{props.monster.name}</h1>\n            <h2>{props.monster.email}</h2>\n        </div>\n\n    )\n}\n","import React from \"react\";\nimport {Card} from \"../card\";\nimport './card-list.css'\n\nexport const CardList = (props) => {\n    return (\n        <div className={'card-list'}>\n            {props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            ))}\n        </div>\n    )\n}","import React from \"react\";\nimport './search-box.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return (\n        <input\n            type=\"search\"\n            className={'search'}\n            placeholder={placeholder}\n            onChange={handleChange}\n        />\n    )\n}\n","import React from \"react\";\nimport './App.css';\nimport {CardList} from \"./components/card-list\";\nimport {SearchBox} from \"./components/search-box\";\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}))\n    }\n\n    handleChange = (e) => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n\n        const {monsters, searchField} = this.state\n        const filteredMonsters = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\n        );\n\n        return (\n            <div className={'App'}>\n                <h1 className={'title'}>Monsters Rolodex</h1>\n                <SearchBox\n                    placeholder='search monsters'\n                    handleChange={this.handleChange}\n                />\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        )\n    }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}